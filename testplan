apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: orders-persistent
  namespace: sock-shop
  labels:
    appname: sockapp
    type: persistent
    app.kubernetes.io/name: sockapp
    app.kubernetes.io/component: persistent
    app.kubernetes.io/instance: orders
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: nutanix-volume
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: cart-persistent
  namespace: sock-shop
  labels:
    appname: sockapp
    type: persistent
    app.kubernetes.io/name: sockapp
    app.kubernetes.io/component: persistent
    app.kubernetes.io/instance: carts-db
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: nutanix-volume
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: sock-shop-cache
  namespace: sock-shop
  labels:
    appname: sockapp
    type: temp
    app.kubernetes.io/name: sockapp
    app.kubernetes.io/component: temp
    app.kubernetes.io/instance: carts-db
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: nutanix-volume
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: carts
  labels:
    name: carts
    app.kubernetes.io/name: carts
  namespace: sock-shop
spec:
  replicas: 1
  selector:
    matchLabels:
      name: carts
      app.kubernetes.io/name: carts
  template:
    metadata:
      labels:
        name: carts
        app.kubernetes.io/name: carts
    spec:
      containers:
      - name: carts
        image: quay.io/nikhil_mundra/sock/weaveworksdemos/carts:0.4.8
        env:
        - name: JAVA_OPTS
          value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false
        resources:
          limits:
            cpu: 300m
            memory: 500Mi
          requests:
            cpu: 100m
            memory: 200Mi
        ports:
        - containerPort: 80
        securityContext:
          runAsNonRoot: true
          runAsUser: 10001
          capabilities:
            drop:
            - all
            add:
            - NET_BIND_SERVICE
          readOnlyRootFilesystem: true
        volumeMounts:
        - mountPath: /tmp
          name: tmp-volume
      volumes:
      - name: tmp-volume
        emptyDir:
          medium: Memory
      nodeSelector:
        beta.kubernetes.io/os: linux
---
apiVersion: v1
kind: Service
metadata:
  name: carts
  annotations:
    prometheus.io/scrape: 'true'
  labels:
    name: carts
    app.kubernetes.io/name: carts
  namespace: sock-shop
spec:
  ports:
  # the port that this service should serve on
  - port: 80
    targetPort: 80
  selector:
    name: carts
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: carts-db
  labels:
    name: carts-db
    app.kubernetes.io/name: carts-db
    app.kubernetes.io/instance: carts-db
  namespace: sock-shop
spec:
  replicas: 1
  selector:
    matchLabels:
      name: carts-db
      app.kubernetes.io/name: carts-db
      app.kubernetes.io/instance: carts-db
  template:
    metadata:
      labels:
        name: carts-db
        app.kubernetes.io/name: carts-db
        app.kubernetes.io/instance: carts-db
    spec:
      containers:
      - name: carts-db
        image: quay.io/nikhil_mundra/sock/mongo:3
        ports:
        - name: mongo
          containerPort: 27017
        volumeMounts:
        - mountPath: /tmp
          name: tmp-volume
        - mountPath: /data/db
          name: persistent-database
        - mountPath: /cache/data
          name: cache
      volumes:
      - name: tmp-volume
        emptyDir:
          medium: Memory
      - name: persistent-database
        persistentVolumeClaim:
          claimName: cart-persistent
      - name: cache
        persistentVolumeClaim:
          claimName: sock-shop-cache
      nodeSelector:
        beta.kubernetes.io/os: linux
---
apiVersion: v1
kind: Service
metadata:
  name: carts-db
  labels:
    name: carts-db
    app.kubernetes.io/name: carts-db
    app.kubernetes.io/instance: carts-db
  namespace: sock-shop
spec:
  ports:
  # the port that this service should serve on
  - port: 27017
    targetPort: 27017
  selector:
    name: carts-db
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: catalogue
  labels:
    name: catalogue
    app.kubernetes.io/name: catalogue
  namespace: sock-shop
spec:
  replicas: 1
  selector:
    matchLabels:
      name: catalogue
  template:
    metadata:
      labels:
        name: catalogue
    spec:
      containers:
      - name: catalogue
        image: quay.io/nikhil_mundra/sock/weaveworksdemos/catalogue:0.3.5
        command: ["/app"]
        args:
        - -port=80
        resources:
          limits:
            cpu: 200m
            memory: 200Mi
          requests:
            cpu: 100m
            memory: 100Mi
        ports:
        - containerPort: 80
        securityContext:
          runAsNonRoot: true
          runAsUser: 10001
          capabilities:
            drop:
            - all
            add:
            - NET_BIND_SERVICE
          readOnlyRootFilesystem: true
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 300
          periodSeconds: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 180
          periodSeconds: 3
      nodeSelector:
        beta.kubernetes.io/os: linux
---
apiVersion: v1
kind: Service
metadata:
  name: catalogue
  annotations:
    prometheus.io/scrape: 'true'
  labels:
    name: catalogue
    app.kubernetes.io/name: catalogue
  namespace: sock-shop
spec:
  ports:
  # the port that this service should serve on
  - port: 80
    targetPort: 80
  selector:
    name: catalogue
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: catalogue-db
  labels:
    name: catalogue-db
    app.kubernetes.io/name: catalogue-db
  namespace: sock-shop
spec:
  replicas: 1
  selector:
    matchLabels:
      name: catalogue-db
      app.kubernetes.io/name: catalogue-db
  template:
    metadata:
      labels:
        name: catalogue-db
        app.kubernetes.io/name: catalogue-db
    spec:
      containers:
      - name: catalogue-db
        image: quay.io/nikhil_mundra/sock/weaveworksdemos/catalogue-db:0.3.0
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: fake_password
        - name: MYSQL_DATABASE
          value: socksdb
        ports:
        - name: mysql
          containerPort: 3306
      nodeSelector:
        beta.kubernetes.io/os: linux
---
apiVersion: v1
kind: Service
metadata:
  name: catalogue-db
  labels:
    name: catalogue-db
    app.kubernetes.io/name: catalogue-db
  namespace: sock-shop
spec:
  ports:
  # the port that this service should serve on
  - port: 3306
    targetPort: 3306
  selector:
    name: catalogue-db
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: front-end
  namespace: sock-shop
  labels:
    name: front-end
    app.kubernetes.io/name: front-end
spec:
  replicas: 1
  selector:
    matchLabels:
      name: front-end
      app.kubernetes.io/name: front-end
  template:
    metadata:
      labels:
        name: front-end
        app.kubernetes.io/name: front-end
    spec:
      containers:
      - name: front-end
        image: quay.io/nikhil_mundra/sock/weaveworksdemos/front-end:0.3.12
        resources:
          limits:
            cpu: 300m
            memory: 1000Mi
          requests:
            cpu: 100m
            memory: 300Mi
        ports:
        - containerPort: 8079
        env:
        - name: SESSION_REDIS
          value: "true"
        securityContext:
          runAsNonRoot: true
          runAsUser: 10001
          capabilities:
            drop:
            - all
          readOnlyRootFilesystem: true
        livenessProbe:
          httpGet:
            path: /
            port: 8079
          initialDelaySeconds: 300
          periodSeconds: 3
        readinessProbe:
          httpGet:
            path: /
            port: 8079
          initialDelaySeconds: 30
          periodSeconds: 3
      nodeSelector:
        beta.kubernetes.io/os: linux
---
apiVersion: v1
kind: Service
metadata:
  name: front-end
  annotations:
    prometheus.io/scrape: 'true'
  labels:
    name: front-end
    app.kubernetes.io/name: front-end
  namespace: sock-shop
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 8079
  selector:
    name: front-end
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: orders
  labels:
    name: orders
    app.kubernetes.io/name: orders
  namespace: sock-shop
spec:
  replicas: 1
  selector:
    matchLabels:
      name: orders
      app.kubernetes.io/name: orders
  template:
    metadata:
      labels:
        name: orders
        app.kubernetes.io/name: orders
    spec:
      containers:
      - name: orders
        image: quay.io/nikhil_mundra/sock/weaveworksdemos/orders:0.4.7
        env:
        - name: JAVA_OPTS
          value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false
        resources:
          limits:
            cpu: 500m
            memory: 500Mi
          requests:
            cpu: 100m
            memory: 300Mi
        ports:
        - containerPort: 80
        securityContext:
          runAsNonRoot: true
          runAsUser: 10001
          capabilities:
            drop:
            - all
            add:
            - NET_BIND_SERVICE
          readOnlyRootFilesystem: true
        volumeMounts:
        - mountPath: /tmp
          name: tmp-volume
      volumes:
      - name: tmp-volume
        emptyDir:
          medium: Memory
      nodeSelector:
        beta.kubernetes.io/os: linux
---
apiVersion: v1
kind: Service
metadata:
  name: orders
  annotations:
    prometheus.io/scrape: 'true'
  labels:
    name: orders
    app.kubernetes.io/name: orders
  namespace: sock-shop
spec:
  ports:
  # the port that this service should serve on
  - port: 80
    targetPort: 80
  selector:
    name: orders
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: orders-db
  labels:
    name: orders-db
    app.kubernetes.io/name: orders-db
    app.kubernetes.io/instance: orders
  namespace: sock-shop
spec:
  replicas: 1
  selector:
    matchLabels:
      name: orders-db
      app.kubernetes.io/name: orders-db
      app.kubernetes.io/instance: orders
  template:
    metadata:
      labels:
        name: orders-db
        app.kubernetes.io/name: orders-db
        app.kubernetes.io/instance: orders
    spec:
      containers:
      - name: orders-db
        image: quay.io/nikhil_mundra/sock/mongo:3
        ports:
        - name: mongo
          containerPort: 27017
        volumeMounts:
        - mountPath: /tmp
          name: tmp-volume
        - mountPath: /data/db
          name: persistent-orders-storage
      volumes:
      - name: tmp-volume
        emptyDir:
          medium: Memory
      - name: persistent-orders-storage
        persistentVolumeClaim:
          claimName: orders-persistent
      nodeSelector:
        beta.kubernetes.io/os: linux
---
apiVersion: v1
kind: Service
metadata:
  name: orders-db
  labels:
    name: orders-db
    app.kubernetes.io/name: orders-db
    app.kubernetes.io/instance: orders
  namespace: sock-shop
spec:
  ports:
  # the port that this service should serve on
  - port: 27017
    targetPort: 27017
  selector:
    name: orders-db
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: payment
  labels:
    name: payment
    app.kubernetes.io/name: payment
  namespace: sock-shop
spec:
  replicas: 1
  selector:
    matchLabels:
      name: payment
      app.kubernetes.io/name: payment
  template:
    metadata:
      labels:
        name: payment
        app.kubernetes.io/name: payment
    spec:
      containers:
      - name: payment
        image: quay.io/nikhil_mundra/sock/weaveworksdemos/payment:0.4.3
        resources:
          limits:
            cpu: 200m
            memory: 200Mi
          requests:
            cpu: 99m
            memory: 100Mi
        ports:
        - containerPort: 80
        securityContext:
          runAsNonRoot: true
          runAsUser: 10001
          capabilities:
            drop:
            - all
            add:
            - NET_BIND_SERVICE
          readOnlyRootFilesystem: true
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 300
          periodSeconds: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 180
          periodSeconds: 3
      nodeSelector:
        beta.kubernetes.io/os: linux
---
apiVersion: v1
kind: Service
metadata:
  name: payment
  annotations:
    prometheus.io/scrape: 'true'
  labels:
    name: payment
    app.kubernetes.io/name: payment
  namespace: sock-shop
spec:
  ports:
  # the port that this service should serve on
  - port: 80
    targetPort: 80
  selector:
    name: payment
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: queue-master
  labels:
    name: queue-master
    app.kubernetes.io/name: queue-master
  namespace: sock-shop
spec:
  replicas: 1
  selector:
    matchLabels:
      name: queue-master
      app.kubernetes.io/name: queue-master
  template:
    metadata:
      labels:
        name: queue-master
        app.kubernetes.io/name: queue-master
    spec:
      containers:
      - name: queue-master
        image: quay.io/nikhil_mundra/sock/weaveworksdemos/queue-master:0.3.1
        env:
        - name: JAVA_OPTS
          value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false
        resources:
          limits:
            cpu: 300m
            memory: 500Mi
          requests:
            cpu: 100m
            memory: 300Mi
        ports:
        - containerPort: 80
      nodeSelector:
        beta.kubernetes.io/os: linux
---
apiVersion: v1
kind: Service
metadata:
  name: queue-master
  annotations:
    prometheus.io/scrape: 'true'
  labels:
    name: queue-master
    app.kubernetes.io/name: queue-master
  namespace: sock-shop
spec:
  ports:
  # the port that this service should serve on
  - port: 80
    targetPort: 80
  selector:
    name: queue-master
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rabbitmq
  labels:
    name: rabbitmq
    app.kubernetes.io/name: rabbitmq
  namespace: sock-shop
spec:
  replicas: 1
  selector:
    matchLabels:
      name: rabbitmq
      app.kubernetes.io/name: rabbitmq
  template:
    metadata:
      labels:
        name: rabbitmq
        app.kubernetes.io/name: rabbitmq
      annotations:
        prometheus.io/scrape: "false"
    spec:
      containers:
      - name: rabbitmq
        image: quay.io/nikhil_mundra/sock/rabbitmq:3.6.8-management
        ports:
        - containerPort: 15672
          name: management
        - containerPort: 5672
          name: rabbitmq
        securityContext:
          capabilities:
            drop:
            - all
            add:
            - CHOWN
            - SETGID
            - SETUID
            - DAC_OVERRIDE
          readOnlyRootFilesystem: true
      - name: rabbitmq-exporter
        image: quay.io/nikhil_mundra/sock/kbudde/rabbitmq-exporter
        ports:
        - containerPort: 9090
          name: exporter
      nodeSelector:
        beta.kubernetes.io/os: linux
---
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq
  annotations:
    prometheus.io/scrape: 'true'
    prometheus.io/port: '9090'
  labels:
    name: rabbitmq
    app.kubernetes.io/name: rabbitmq
  namespace: sock-shop
spec:
  ports:
  # the port that this service should serve on
  - port: 5672
    name: rabbitmq
    targetPort: 5672
  - port: 9090
    name: exporter
    targetPort: exporter
    protocol: TCP
  selector:
    name: rabbitmq
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: session-db
  labels:
    name: session-db
    app.kubernetes.io/name: session-db
  namespace: sock-shop
spec:
  replicas: 1
  selector:
    matchLabels:
      name: session-db
      app.kubernetes.io/name: session-db
  template:
    metadata:
      labels:
        name: session-db
        app.kubernetes.io/name: session-db
      annotations:
        prometheus.io.scrape: "false"
    spec:
      containers:
      - name: session-db
        image: quay.io/nikhil_mundra/sock/redis:alpine
        ports:
        - name: redis
          containerPort: 6379
        securityContext:
          capabilities:
            drop:
            - all
            add:
            - CHOWN
            - SETGID
            - SETUID
          readOnlyRootFilesystem: true
      nodeSelector:
        beta.kubernetes.io/os: linux
---
apiVersion: v1
kind: Service
metadata:
  name: session-db
  labels:
    name: session-db
    app.kubernetes.io/name: session-db
  namespace: sock-shop
spec:
  ports:
  # the port that this service should serve on
  - port: 6379
    targetPort: 6379
  selector:
    name: session-db
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: shipping
  labels:
    name: shipping
    app.kubernetes.io/name: shipping
  namespace: sock-shop
spec:
  replicas: 1
  selector:
    matchLabels:
      name: shipping
      app.kubernetes.io/name: shipping
  template:
    metadata:
      labels:
        name: shipping
        app.kubernetes.io/name: shipping
    spec:
      containers:
      - name: shipping
        image: quay.io/nikhil_mundra/sock/weaveworksdemos/shipping:0.4.8
        env:
        - name: ZIPKIN
          value: zipkin.jaeger.svc.cluster.local
        - name: JAVA_OPTS
          value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false
        resources:
          limits:
            cpu: 300m
            memory: 500Mi
          requests:
            cpu: 100m
            memory: 300Mi
        ports:
        - containerPort: 80
        securityContext:
          runAsNonRoot: true
          runAsUser: 10001
          capabilities:
            drop:
            - all
            add:
            - NET_BIND_SERVICE
          readOnlyRootFilesystem: true
        volumeMounts:
        - mountPath: /tmp
          name: tmp-volume
      volumes:
      - name: tmp-volume
        emptyDir:
          medium: Memory
      nodeSelector:
        beta.kubernetes.io/os: linux
---
apiVersion: v1
kind: Service
metadata:
  name: shipping
  annotations:
    prometheus.io/scrape: 'true'
  labels:
    name: shipping
    app.kubernetes.io/name: shipping
  namespace: sock-shop
spec:
  ports:
  # the port that this service should serve on
  - port: 80
    targetPort: 80
  selector:
    name: shipping

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user
  labels:
    name: user
    app.kubernetes.io/name: user
    app.kubernetes.io/instance: user
  namespace: sock-shop
spec:
  replicas: 1
  selector:
    matchLabels:
      name: user
      app.kubernetes.io/name: user
      app.kubernetes.io/instance: user
  template:
    metadata:
      labels:
        name: user
        app.kubernetes.io/name: user
        app.kubernetes.io/instance: user
    spec:
      containers:
      - name: user
        image: quay.io/nikhil_mundra/sock/weaveworksdemos/user:0.4.7
        resources:
          limits:
            cpu: 300m
            memory: 200Mi
          requests:
            cpu: 100m
            memory: 100Mi
        ports:
        - containerPort: 80
        env:
        - name: mongo
          value: user-db:27017
        securityContext:
          runAsNonRoot: true
          runAsUser: 10001
          capabilities:
            drop:
            - all
            add:
            - NET_BIND_SERVICE
          readOnlyRootFilesystem: false
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 300
          periodSeconds: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 180
          periodSeconds: 3
      nodeSelector:
        beta.kubernetes.io/os: linux
---
apiVersion: v1
kind: Service
metadata:
  name: user
  annotations:
    prometheus.io/scrape: 'true'
  labels:
    name: user
    app.kubernetes.io/name: user
    app.kubernetes.io/instance: user
  namespace: sock-shop
spec:
  type: LoadBalancer 
  # the port that this service should serve on
  ports:
  - port: 80
    targetPort: 80
  selector:
    name: user

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-db
  labels:
    name: user-db
    app.kubernetes.io/name: user-db
    app.kubernetes.io/instance: user
  namespace: sock-shop
spec:
  replicas: 1
  selector:
    matchLabels:
      name: user-db
      app.kubernetes.io/name: user-db
      app.kubernetes.io/instance: user
  template:
    metadata:
      labels:
        name: user-db
        app.kubernetes.io/name: user-db
        app.kubernetes.io/instance: user
    spec:
      containers:
      - name: user-db
        image: quay.io/nikhil_mundra/sock/mongo:3
        ports:
        - name: mongo
          containerPort: 27017
        volumeMounts:
        - mountPath: /tmp
          name: tmp-volume
        - mountPath: /data/db
          name: persistent-user-storage
      volumes:
      - name: tmp-volume
        emptyDir:
          medium: Memory
      - name: persistent-user-storage
        persistentVolumeClaim:
          claimName: user-persistent
      nodeSelector:
        beta.kubernetes.io/os: linux
---
apiVersion: v1
kind: Service
metadata:
  name: user-db
  labels:
    name: user-db
    app.kubernetes.io/name: user-db
    app.kubernetes.io/instance: user
  namespace: sock-shop
spec:
  ports:
  # the port that this service should serve on
  - port: 27017
    targetPort: 27017
  selector:
    name: user-db
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: non-nutanix-pvc
  namespace: sock-shop
  labels:
    appname: sockapp
    type: random
    app.kubernetes.io/name: sockapp
    app.kubernetes.io/component: random
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: nutanix-volume
  volumeMode: Filesystem
